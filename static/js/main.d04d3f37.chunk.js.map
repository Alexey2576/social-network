{"version":3,"sources":["Components/Home/Home.tsx","redux/app/appActions.ts","Components/Commons/LoginForm/LoginForm.tsx","Components/Commons/LoginForm/ContainerLoginForm.tsx","Components/Login/Login.tsx","redux/messages/messagesActions.ts","Components/Commons/Utils/functions-helpers.ts","hoc/withAuthRedirect.tsx","redux/profile/profileThunk.ts","redux/profile/profileActions.ts","Components/Navbar/SubMenuMessages/ItemSubMenu/ItemSubMenu.tsx","Components/Navbar/SubMenuMessages/SubMenuMessages.tsx","Components/Navbar/Navbar.tsx","Components/Header/Header.tsx","Components/Header/ContainerHeader.tsx","Components/Content/InitializedContent.tsx","Components/NotFound/NotFound.tsx","redux/app/appSelectors.ts","Components/App.tsx","redux/profile/profileReducer.ts","redux/peoples/peoplesReducer.ts","redux/auth/authReducer.ts","redux/messages/MessagesReducer.ts","redux/app/appReducer.ts","redux/redax-store.ts","index.tsx","redux/peoples/peoplesActions.ts","redux/auth/authSelectors.ts","api/api.ts","redux/auth/authActions.ts","redux/auth/authThunk.ts"],"names":["Paragraph","Typography","Home","style","display","flexDirection","alignItems","justifyContent","width","Title","level","marginBottom","color","fontWeight","fontSize","APP_ACTIONS_TYPES","setIsInitialize","isInitialized","type","SET_IS_INITIALIZE","payload","LoginForm","memo","onSubmit","captchaUrl","backgroundColor","padding","name","className","initialValues","rememberMe","onFinish","size","Item","rules","required","message","prefix","UserOutlined","placeholder","LockOutlined","valuePropName","noStyle","href","src","alt","label","htmlType","ContainerLoginForm","React","getLogInData","navigate","useNavigate","onSubmitHandler","loginData","a","console","log","data","resultCode","FORM_ERROR","messages","userId","compose","connect","state","getCaptchaUrl","Login","this","props","isAuth","to","height","PureComponent","getIsAuth","MESSAGES_ACTIONS_TYPES","addUserMessageAC","id","photo","ADD_MESSAGE","sendUserMessageAC","SEND_MESSAGE","followUnfollowFlow","people_ID","flag","dispatch","apiMethod","actionCreator","setIsFollowing","updateObjectInArray","items","itemId","objPropName","newObjProp","map","p","mapStateToProps","authState","withAuthRedirect","Component","restProps","getProfileUserInfo","userID","profileAPI","getProfile","toString","setProfileUserInfo","getProfileStatus","getStatus","status","setProfileStatus","updateProfileStatus","updateStatus","uploadProfilePhoto","file","uploadPhoto","setProfilePhoto","updateProfileData","profileData","getState","authId","updateProfile","addPost","post","addPostAC","PROFILE_ACTIONS_TYPES","ADD_POST","profileUserInfo","SET_PROFILE_USER_INFO","SET_PROFILE_STATUS","photos","SET_PROFILE_PHOTOS","ItemSubMenu","SubMenuMessages","getUsers","useSelector","messagesPage","users","icon","title","user","author","Navbar","collapsed","toggle","getProfilePhotos","fullAddressNavLink","Sider","trigger","collapsible","minHeight","large","undefined","theme","mode","VideoCameraOutlined","onClick","MenuUnfoldOutlined","HeaderSN","login","logOutCallback","ContainerHeader","getLogOutData","render","getId","email","getEmail","getLogin","ContainerProfile","lazy","ContainerPeoples","ContainerMessages","InitializedContent","setState","margin","fallback","path","index","element","NotFound","getIsInitialized","appState","App","getAppData","initialProfilePageState","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","small","contacts","vk","github","twitter","website","youtube","facebook","mainLink","instagram","posts","v1","like","initialPeoplesPageState","peoples","totalCount","currentPage","countPeoplesOnPage","isFetching","isFollowing","following_ID","initialAuthState","initialMessagesPageState","avatar","usersMessages","content","datetime","rootReducer","combineReducers","profilePage","action","peoplesPage","PEOPLES_ACTIONS_TYPES","SET_PEOPLES","FOLLOW","followed","UNFOLLOW","SET_TOTAL_COUNT","SET_CURRENT_PAGE","SET_IS_FETCHING","SET_IS_FOLLOWING","followUser_ID","filter","SET_COUNT_PEOPLES_ON_PAGE","AUTH_ACTIONS_TYPES","SET_AUTH_DATA","SET_CAPTCHA_URL","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","followSuccess","unfollowSuccess","setPeoples","setTotalCount","setCurrentPage","setCountPeoplesOnPage","instanceAxios","axios","create","withCredentials","baseURL","headers","userAPI","get","then","response","setFollow","setUnfollow","delete","put","formData","FormData","append","authAPI","getLoggedData","logIn","logOut","securityAPI","getCaptchaURL","setAuthData","setCaptchaUrl","url"],"mappings":"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","file":"static/js/main.d04d3f37.chunk.js","sourcesContent":["import {Typography} from 'antd';\r\nimport React from \"react\";\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nexport const Home = () => {\r\n   return (\r\n      <div style={{\r\n         display: \"flex\",\r\n         flexDirection: \"column\",\r\n         alignItems: \"start\",\r\n         justifyContent: \"left\",\r\n         width: \"60%\"\r\n      }}>\r\n         <Typography.Title\r\n            level={1}\r\n            style={{\r\n               marginBottom: \"20px\",\r\n               color: \"blue\",\r\n               fontWeight: \"bold\",\r\n               fontSize: \"50px\"\r\n            }}\r\n         >\r\n            Social network\r\n         </Typography.Title>\r\n\r\n         <Paragraph style={{\r\n            fontSize: \"20px\",\r\n            width: \"60%\",\r\n         }}>\r\n            Social network помогает вам всегда оставаться на связи и общаться со своими знакомыми.\r\n         </Paragraph>\r\n      </div>\r\n   )\r\n}","export enum APP_ACTIONS_TYPES {\r\n   SET_IS_INITIALIZE = 'appReducer/SET_IS_INITIALIZE',\r\n}\r\n\r\nexport type AppActionCreatorsType =\r\n  | ReturnType<typeof setIsInitialize>\r\n\r\nexport const setIsInitialize = ( isInitialized: boolean) => (\r\n   {\r\n      type: APP_ACTIONS_TYPES.SET_IS_INITIALIZE,\r\n      payload: { isInitialized }\r\n   } as const\r\n)\r\n","import React, {FC, memo} from \"react\";\r\nimport {UserLoginType} from \"../../../redux/auth/authReducer\";\r\nimport {Button, Checkbox, Form, Input} from 'antd';\r\nimport {Content} from \"antd/lib/layout/layout\";\r\nimport {LockOutlined, UserOutlined} from '@ant-design/icons';\r\n\r\nexport const LoginForm: FC<LoginType> = memo(({onSubmit, captchaUrl}) => {\r\n   return (\r\n      <Content style={{\r\n         backgroundColor: \"white\",\r\n         padding: \"20px 20px\",\r\n         width: \"100%\",\r\n      }}>\r\n         <Form\r\n            name=\"normal_login\"\r\n            className=\"login-form\"\r\n            initialValues={{rememberMe: true}}\r\n            onFinish={onSubmit}\r\n            size={\"large\"}\r\n\r\n         >\r\n            <Form.Item\r\n               name=\"email\"\r\n               rules={[{required: true, message: 'Please input your email!'}]}\r\n            >\r\n               <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>} placeholder=\"Email\"/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n               name=\"password\"\r\n               rules={[{required: true, message: 'Please input your password!'}]}\r\n            >\r\n               <Input\r\n                  prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n               />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n               <Form.Item name=\"rememberMe\" valuePropName=\"checked\" noStyle>\r\n                  <Checkbox>Remember me</Checkbox>\r\n               </Form.Item>\r\n\r\n               <a className=\"login-form-forgot\" href=\"\">\r\n                  Forgot password\r\n               </a>\r\n            </Form.Item>\r\n\r\n            {\r\n               captchaUrl &&\r\n               <>\r\n                 <img src={captchaUrl} alt=\"captcha\"/>\r\n                 <Form.Item\r\n                   label=\"Captcha\"\r\n                   name=\"captcha\"\r\n                   rules={[{required: true, message: 'Please input captcha!'}]}\r\n                 >\r\n                   <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>} placeholder=\"Captcha\"/>\r\n                 </Form.Item>\r\n               </>\r\n            }\r\n            <Form.Item>\r\n               <Button\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  className=\"login-form-button\"\r\n                  style={{display: \"block\", width: \"100%\"}}\r\n\r\n               >\r\n                  Log in\r\n               </Button>\r\n               Or <a href=\"\">register now!</a>\r\n            </Form.Item>\r\n         </Form>\r\n         {/*{submitError && <span style={{color: \"red\"}}>{submitError}</span>}*/}\r\n      </Content>\r\n   )\r\n})\r\n\r\n\r\ntype LoginType = {\r\n   captchaUrl: string | null\r\n   onSubmit(loginData: UserLoginType): void\r\n}\r\n\r\n/*\r\n<Form\r\n   name=\"basic\"\r\n   labelCol={{ span: 8 }}\r\n   wrapperCol={{ span: 16 }}\r\n   initialValues={{ remember: true }}\r\n   onFinish={onFinish}\r\n   onFinishFailed={onFinishFailed}\r\n   autoComplete=\"off\"\r\n>\r\n   <Form.Item\r\n      label=\"Username\"\r\n      name=\"username\"\r\n      rules={[{ required: true, message: 'Please input your username!' }]}\r\n   >\r\n      <Input />\r\n   </Form.Item>\r\n\r\n   <Form.Item\r\n      label=\"Password\"\r\n      name=\"password\"\r\n      rules={[{ required: true, message: 'Please input your password!' }]}\r\n   >\r\n      <Input.Password />\r\n   </Form.Item>\r\n\r\n   <Form.Item name=\"remember\" valuePropName=\"checked\" wrapperCol={{ offset: 8, span: 16 }}>\r\n      <Checkbox>Remember me</Checkbox>\r\n   </Form.Item>\r\n\r\n   <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n      <Button type=\"primary\" htmlType=\"submit\">\r\n         Submit\r\n      </Button>\r\n   </Form.Item>\r\n</Form>*/\r\n","import React, {ComponentType} from 'react';\r\nimport {LoginForm} from \"./LoginForm\";\r\nimport {UserLoginType} from \"../../../redux/auth/authReducer\";\r\nimport {compose} from \"@reduxjs/toolkit\";\r\nimport {connect} from \"react-redux\";\r\nimport {getLogInData} from \"../../../redux/auth/authThunk\";\r\nimport {FORM_ERROR} from \"final-form\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {RootState} from \"../../../redux/redax-store\";\r\nimport {getCaptchaUrl} from \"../../../redux/auth/authSelectors\";\r\n\r\ntype ContainerLoginPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst ContainerLoginForm: React.FC<ContainerLoginPropsType> = React.memo(({ getLogInData, captchaUrl }) => {\r\n\r\n   let navigate = useNavigate();\r\n   const onSubmitHandler = async (loginData: UserLoginType) => {\r\n      console.log(loginData)\r\n      let data = await getLogInData(loginData)\r\n      if (data.resultCode !== 0) {\r\n         return {[FORM_ERROR]: data.messages[0]}\r\n      } else {\r\n         navigate(`/profile/${data.data.userId}`)\r\n      }\r\n   }\r\n   return (\r\n      <div>\r\n         <LoginForm onSubmit={onSubmitHandler} captchaUrl={captchaUrl}/>\r\n      </div>\r\n   );\r\n})\r\n\r\ntype MapStateToPropsType = {\r\n   captchaUrl: string | null\r\n}\r\ntype MapDispatchToPropsType = { getLogInData(loginData: UserLoginType): Promise<any> }\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => ({\r\n   captchaUrl: getCaptchaUrl(state)\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n   connect(mapStateToProps, {getLogInData}),\r\n)(ContainerLoginForm)\r\n\r\n\r\n","import React, {ComponentType, PureComponent} from \"react\";\r\nimport ContainerLoginForm from \"../Commons/LoginForm/ContainerLoginForm\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {RootState} from \"../../redux/redax-store\";\r\nimport {getIsAuth} from \"../../redux/auth/authSelectors\";\r\nimport {compose} from \"@reduxjs/toolkit\";\r\nimport {connect} from \"react-redux\";\r\nimport {Home} from \"../Home/Home\";\r\nimport {Layout} from \"antd\";\r\n\r\nclass Login extends PureComponent<HomeType> {\r\n   render() {\r\n\r\n      if (this.props.isAuth) {\r\n         return <Navigate to={\"/\"}/>\r\n      }\r\n\r\n      return (\r\n         <Layout\r\n            className=\"site-layout\"\r\n            style={{\r\n               height: \"100vh\",\r\n               display: \"flex\",\r\n               flexDirection: \"row\",\r\n               alignItems: \"center\",\r\n               justifyContent: \"left\",\r\n               padding: \"0 400px\"\r\n            }}\r\n         >\r\n            <Home/>\r\n            <ContainerLoginForm/>\r\n         </Layout>\r\n      )\r\n   }\r\n}\r\n\r\ntype HomeType = MapStateToPropsType\r\ntype MapStateToPropsType = {\r\n   isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\r\n   return {\r\n      isAuth: getIsAuth(state),\r\n   }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n   connect(mapStateToProps, {}))\r\n(Login)","import {MessageType} from \"./MessagesReducer\";\r\n\r\nexport enum MESSAGES_ACTIONS_TYPES {\r\n   ADD_MESSAGE = 'messagesReducer/ADD_MESSAGE',\r\n   SEND_MESSAGE = 'messagesReducer/SEND_MESSAGE',\r\n}\r\n\r\nexport type MessagesActionCreatorsType =\r\n   | ReturnType<typeof addUserMessageAC>\r\n   | ReturnType<typeof sendUserMessageAC>\r\n\r\nexport const addUserMessageAC = (id: string, name: string, photo: string) =>\r\n   ({ type: MESSAGES_ACTIONS_TYPES.ADD_MESSAGE, payload: {id, name, photo} } as const)\r\nexport const sendUserMessageAC = (message: MessageType & { userId: string }, id: string) =>\r\n   ({ type: MESSAGES_ACTIONS_TYPES.SEND_MESSAGE, payload: {message, id} } as const)","import {ThunkDispatchType} from \"../../../redux/redax-store\";\r\nimport {CommonResponseType} from \"../../../api/api\";\r\nimport {followSuccess, setIsFollowing, unfollowSuccess} from \"../../../redux/peoples/peoplesActions\";\r\n\r\nexport const followUnfollowFlow = async (people_ID: number, flag: boolean, dispatch: ThunkDispatchType, apiMethod: Promise<CommonResponseType>, actionCreator: typeof unfollowSuccess | typeof followSuccess) => {\r\n   try {\r\n      dispatch(setIsFollowing(true, people_ID))\r\n      const data = await apiMethod\r\n      if (data.resultCode === 0) {\r\n         dispatch(actionCreator(people_ID, flag))\r\n         dispatch(setIsFollowing(false, people_ID))\r\n      }\r\n   } catch (e) {\r\n      console.log(\"followUnfollowFlow \", e)\r\n   }\r\n}\r\n\r\nexport const updateObjectInArray = (items: any[], itemId: number, objPropName: string, newObjProp: any) => {\r\n   return items.map(p => p[objPropName] === itemId ? {...p, ...newObjProp} : p)\r\n}","import {RootState} from \"../redux/redax-store\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Login from \"../Components/Login/Login\";\r\n\r\ntype MapStateToPropsType = {\r\n   isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\r\n   return {\r\n      isAuth: state.authState.isAuth\r\n   }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n   const ComponentWithAuthRedirectProp = (props: MapStateToPropsType) => {\r\n      let {isAuth, ...restProps} = props\r\n      if (!isAuth) return <Login/>\r\n      return <Component {...restProps as T}/>\r\n   }\r\n   return connect(mapStateToProps)(ComponentWithAuthRedirectProp)\r\n}","import {RootState, ThunkDispatchType, ThunkType} from \"../redax-store\";\r\nimport {profileAPI} from \"../../api/api\";\r\nimport {addPostAC, setProfilePhoto, setProfileStatus, setProfileUserInfo} from \"./profileActions\";\r\nimport {ProfileUserInfoType} from \"./profileReducer\";\r\n\r\nexport const getProfileUserInfo = (userID: number | null): ThunkType<ProfileUserInfoType | undefined> =>\r\n   async (dispatch: ThunkDispatchType) => {\r\n      try {\r\n         if (userID) {\r\n            let data = await profileAPI.getProfile(userID.toString())\r\n            dispatch(setProfileUserInfo(data))\r\n            return data\r\n         }\r\n      } catch (e) {\r\n         console.log(\"profileThunk -> getProfileUserInfo \", e)\r\n      }\r\n   }\r\n\r\nexport const getProfileStatus = (userID: number | null): ThunkType =>\r\n   async (dispatch: ThunkDispatchType) => {\r\n      try {\r\n         if (userID) {\r\n            let status: string = await profileAPI.getStatus(userID.toString())\r\n            dispatch(setProfileStatus(status))\r\n         }\r\n      } catch (e) {\r\n         console.log(\"profileThunk -> getProfileStatus \", e)\r\n      }\r\n   }\r\n\r\nexport const updateProfileStatus = (status: string): ThunkType =>\r\n   async (dispatch: ThunkDispatchType) => {\r\n      try {\r\n         let data = await profileAPI.updateStatus(status)\r\n         if (data.resultCode === 0)\r\n            dispatch(setProfileStatus(status))\r\n      } catch (e) {\r\n         console.log(\"profileThunk -> updateProfileStatus \", e)\r\n      }\r\n   }\r\n\r\nexport const uploadProfilePhoto = (file: File): ThunkType =>\r\n   async (dispatch: ThunkDispatchType) => {\r\n      try {\r\n         let data = await profileAPI.uploadPhoto(file)\r\n         if (data.resultCode === 0) {\r\n            dispatch(setProfilePhoto(data.data))\r\n         }\r\n      } catch (e) {\r\n         console.log(\"profileThunk -> uploadProfilePhoto \", e)\r\n      }\r\n   }\r\n\r\nexport const updateProfileData = (profileData: ProfileUserInfoType): ThunkType =>\r\n   async (dispatch: ThunkDispatchType, getState: () => RootState): Promise<any> => {\r\n      try {\r\n         const authId = getState().authState.id\r\n         let data = await profileAPI.updateProfile(profileData)\r\n         if (data.resultCode === 0)\r\n            await dispatch(getProfileUserInfo(authId))\r\n         return data\r\n      } catch (e) {\r\n         console.log(\"profileThunk -> updateProfileData \", e)\r\n      }\r\n   }\r\n\r\nexport const addPost = (post: string): ThunkType =>\r\n   async (dispatch: ThunkDispatchType) => {\r\n      dispatch(addPostAC(post))\r\n   }\r\n","import {PhotosType, ProfileUserInfoType} from \"./profileReducer\";\r\n\r\nexport enum PROFILE_ACTIONS_TYPES {\r\n   ADD_POST = 'profileReducer/ADD_POST',\r\n   SET_PROFILE_PHOTOS = 'profileReducer/SET_PROFILE_PHOTOS',\r\n   SET_PROFILE_STATUS = 'profileReducer/SET_PROFILE_STATUS',\r\n   SET_PROFILE_USER_INFO = 'profileReducer/SET_PROFILE_USER_INFO',\r\n}\r\n\r\nexport type ProfileActionCreatorsType =\r\n   | ReturnType<typeof addPostAC>\r\n   | ReturnType<typeof setProfileUserInfo>\r\n   | ReturnType<typeof setProfileStatus>\r\n   | ReturnType<typeof setProfilePhoto>\r\n\r\nexport const addPostAC = (post: string) =>\r\n   ({type: PROFILE_ACTIONS_TYPES.ADD_POST, post} as const)\r\nexport const setProfileUserInfo = (profileUserInfo: ProfileUserInfoType) =>\r\n   ({type: PROFILE_ACTIONS_TYPES.SET_PROFILE_USER_INFO, profileUserInfo} as const)\r\nexport const setProfileStatus = (status: string) =>\r\n   ({type: PROFILE_ACTIONS_TYPES.SET_PROFILE_STATUS, status} as const)\r\nexport const setProfilePhoto = (photos: PhotosType) =>\r\n   ({type: PROFILE_ACTIONS_TYPES.SET_PROFILE_PHOTOS, photos} as const)","import React, {FC} from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Menu} from \"antd\";\r\n\r\nexport const ItemSubMenu: FC<ItemSubMenuType> = ({id, name}) => {\r\n   return (\r\n      <Menu.Item key={id}>\r\n         <NavLink to={`/messages/${id}`}>\r\n            {name}\r\n         </NavLink>\r\n      </Menu.Item>\r\n   );\r\n};\r\n\r\ntype ItemSubMenuType = {\r\n   id: string\r\n   name: string\r\n}","import React from 'react';\r\nimport SubMenu from \"antd/lib/menu/SubMenu\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {ItemSubMenu} from \"./ItemSubMenu/ItemSubMenu\";\r\nimport {RootState} from \"../../../redux/redax-store\";\r\nimport {UserType} from \"../../../redux/messages/MessagesReducer\";\r\n\r\nexport const SubMenuMessages = () => {\r\n\r\n   const getUsers = useSelector<RootState, UserType[]>( state => state.messagesPage.users )\r\n   console.log(getUsers,'USERS')\r\n   return (\r\n      <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"Messages\">\r\n         {\r\n            getUsers.map(user =>\r\n            <ItemSubMenu\r\n               key={user.userId}\r\n               id={user.userId}\r\n               name={user.author}\r\n            />)\r\n         }\r\n      </SubMenu>\r\n   );\r\n};","import {Menu} from \"antd\";\r\nimport React, {FC, memo} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport Sider from \"antd/es/layout/Sider\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {RootState} from \"../../redux/redax-store\";\r\nimport {getProfilePhotos} from \"../../redux/auth/authSelectors\";\r\nimport {SubMenuMessages} from \"./SubMenuMessages/SubMenuMessages\";\r\nimport {MenuUnfoldOutlined, UserOutlined, VideoCameraOutlined} from \"@ant-design/icons\";\r\n\r\nexport const Navbar: FC<NavbarType> = memo(({collapsed, toggle}) => {\r\n\r\n   const id = useSelector<RootState, number | null>((state: RootState) => state.authState.id)\r\n   const photos = useSelector(getProfilePhotos)\r\n   const fullAddressNavLink = `/profile/${id}`\r\n\r\n   return (\r\n      <Sider\r\n         trigger={null}\r\n         collapsible\r\n         collapsed={collapsed}\r\n         style={{minHeight: \"100vh\"}}\r\n      >\r\n         <div className=\"logo\"\r\n              style={{\r\n                 backgroundColor: \"white\",\r\n                 width: \"100%\",\r\n              }}>\r\n            <img src={photos ? photos.large : undefined} alt=\"logo\" style={{\r\n               width: \"100%\",\r\n               height: \"100%\"\r\n            }}/>\r\n         </div>\r\n         <Menu theme=\"light\" mode=\"inline\">\r\n            <Menu.Item key=\"1\" icon={<UserOutlined/>}>\r\n               <NavLink to={fullAddressNavLink}>\r\n                  Profile\r\n               </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"2\" icon={<VideoCameraOutlined/>}>\r\n               <NavLink to=\"/peoples\">\r\n                  Peoples\r\n               </NavLink>\r\n            </Menu.Item>\r\n\r\n            <SubMenuMessages/>\r\n\r\n            <Menu.Item onClick={() => toggle()}>\r\n               <MenuUnfoldOutlined/>\r\n            </Menu.Item>\r\n         </Menu>\r\n      </Sider>\r\n   )\r\n})\r\n\r\ntype NavbarType = {\r\n   collapsed: boolean\r\n   toggle: () => void\r\n}\r\n\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Header} from \"antd/es/layout/layout\";\r\nimport {Button} from \"antd\";\r\nimport Title from \"antd/lib/typography/Title\";\r\nimport './../../index.css'\r\n\r\nexport const HeaderSN: React.FC<HeaderType> = React.memo((\r\n   {\r\n      login,\r\n      isAuth,\r\n      logOutCallback,\r\n   }\r\n) => {\r\n\r\n   const onClickLogOutHandler = () => logOutCallback()\r\n   return (\r\n      <Header\r\n         className=\"site-layout-background\"\r\n         style={{\r\n            padding: \"0 20px\",\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\"\r\n         }}\r\n      >\r\n         {\r\n            isAuth &&\r\n            <>\r\n              <NavLink to={'/'}>\r\n                <Title level={2}>{login}</Title>\r\n              </NavLink>\r\n              <NavLink to={'/login'}>\r\n                <Button onClick={onClickLogOutHandler}>Exit</Button>\r\n              </NavLink>\r\n            </>\r\n         }\r\n      </Header>\r\n   )\r\n})\r\n\r\nexport type HeaderType = {\r\n   collapsed: boolean\r\n   toggle: () => void\r\n   login: string | null\r\n   isAuth: boolean\r\n   logOutCallback: () => void\r\n}","import React, {ComponentType, PureComponent} from \"react\";\r\nimport {HeaderSN} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../redux/redax-store\";\r\nimport {getLogOutData} from \"../../redux/auth/authThunk\";\r\nimport {compose} from \"@reduxjs/toolkit\";\r\nimport {getEmail, getId, getIsAuth, getLogin} from \"../../redux/auth/authSelectors\";\r\n\r\nclass ContainerHeader extends PureComponent<HeaderPropsType, HeaderStateType> {\r\n   logOutCallback = () => this.props.getLogOutData()\r\n\r\n   render = () => (\r\n      <HeaderSN\r\n         {...this.props}\r\n         logOutCallback={this.logOutCallback}\r\n         collapsed={this.props.collapsed}\r\n         toggle={this.props.toggle}\r\n      />\r\n   )\r\n}\r\n\r\ntype HeaderStateType = {}\r\ntype HeaderPropsType = MapStateToPropsType\r\n   & MapDispatchToPropsType\r\n   & { collapsed: boolean; toggle: () => void }\r\ntype MapStateToPropsType = {\r\n   id: number | null\r\n   email: string | null\r\n   login: string | null\r\n   isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n   getAuthData(): void\r\n   getLogOutData(): void\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\r\n   return {\r\n      id: getId(state),\r\n      email: getEmail(state),\r\n      isAuth: getIsAuth(state),\r\n      login: getLogin(state)\r\n   }\r\n}\r\n\r\nexport default compose<ComponentType<{\r\n   collapsed: boolean\r\n   toggle: () => void\r\n}>>(\r\n   connect(mapStateToProps, {getLogOutData}))\r\n(ContainerHeader)","import {Layout} from \"antd\";\r\nimport {Home} from \"../Home/Home\";\r\nimport {Navbar} from \"../Navbar/Navbar\";\r\nimport {compose} from \"@reduxjs/toolkit\";\r\nimport {Content} from \"antd/es/layout/layout\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport ContainerHeader from \"../Header/ContainerHeader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React, {ComponentType, lazy, PureComponent, Suspense} from \"react\";\r\n\r\nconst ContainerProfile = lazy(() => import(\"./Profile/ContainerProfile\"));\r\nconst ContainerPeoples = lazy(() => import(\"./Peoples/ContainerPeoples\"));\r\nconst ContainerMessages = lazy(() => import(\"./Messages/ContainerMessages\"));\r\n\r\nclass InitializedContent extends PureComponent {\r\n   state = {\r\n      collapsed: false,\r\n   };\r\n   toggle = () => {\r\n      this.setState({\r\n         collapsed: !this.state.collapsed,\r\n      });\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <Layout style={{display: \"block\"}}>\r\n            <ContainerHeader\r\n               collapsed={this.state.collapsed}\r\n               toggle={this.toggle}\r\n            />\r\n\r\n            <div style={{display: \"flex\"}}>\r\n               <Navbar\r\n                  collapsed={this.state.collapsed}\r\n                  toggle={this.toggle}\r\n               />\r\n\r\n               <Content\r\n                  className=\"site-layout-background\"\r\n                  style={{\r\n                     margin: '24px 16px',\r\n                     padding: 24,\r\n                     minHeight: 280,\r\n                  }}\r\n               >\r\n                  <Suspense fallback={<div>Загрузка...</div>}>\r\n                     <Routes>\r\n                        <Route path={\"/\"}>\r\n                           <Route index element={<Home/>}/>\r\n                           <Route path=\"/profile/:userID\"\r\n                                  element={<ContainerProfile/>}/>\r\n                           <Route path=\"/messages/:userID\"\r\n                                  element={<ContainerMessages/>}/>\r\n                           <Route path=\"/peoples\"\r\n                                  element={<ContainerPeoples/>}/>\r\n                        </Route>\r\n                     </Routes>\r\n                  </Suspense>\r\n               </Content>\r\n            </div>\r\n         </Layout>\r\n      )\r\n   }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n   withAuthRedirect,\r\n)(InitializedContent)\r\n","import React from 'react';\r\n\r\nexport const NotFound = () => {\r\n   return (\r\n      <div>\r\n         404\r\n      </div>\r\n   );\r\n};","import {RootState} from \"../redax-store\";\r\n\r\nexport const getIsInitialized = (state: RootState): boolean => state.appState.isInitialized","import React, {ComponentType, PureComponent} from 'react';\r\nimport {compose} from \"@reduxjs/toolkit\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppDispatch, RootState} from \"../redux/redax-store\";\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport '../index'\r\nimport {Layout, Spin} from 'antd';\r\nimport InitializedContent from \"./Content/InitializedContent\";\r\nimport {NotFound} from \"./NotFound/NotFound\";\r\nimport {getAppData} from \"../redux/auth/authThunk\";\r\nimport Login from \"./Login/Login\";\r\nimport {getIsInitialized} from \"../redux/app/appSelectors\";\r\n\r\nexport class App extends PureComponent<AppPropsType, AppDispatch> {\r\n   componentDidMount() {\r\n      this.props.getAppData()\r\n   }\r\n\r\n   render() {\r\n\r\n      if (!this.props.isInitialized) {\r\n         return (<Spin size={\"large\"}/>)\r\n      }\r\n\r\n      return (\r\n         <Layout className=\"site-layout\" style={{minHeight: '100vh', display: \"block\"}}>\r\n            <Routes>\r\n               <Route path={\"/*\"} element={<InitializedContent/>}/>\r\n               <Route path={\"/login\"} element={<Login/>}/>\r\n               <Route path={\"/404\"} element={<NotFound/>}/>\r\n            </Routes>\r\n         </Layout>\r\n      );\r\n   }\r\n}\r\n\r\ntype AppPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = { isInitialized: boolean }\r\ntype MapDispatchToPropsType = { getAppData: () => void }\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => ({isInitialized: getIsInitialized(state)})\r\n\r\nexport default compose<ComponentType>(\r\n   connect(mapStateToProps, {getAppData}))\r\n(App)\r\n","import {v1} from \"uuid\";\r\nimport {ActionCreatorsType} from \"../redax-store\";\r\nimport {PROFILE_ACTIONS_TYPES} from \"./profileActions\";\r\nimport {PostsType} from \"../../Components/Content/Profile/Posts/Post/Post\";\r\n\r\nconst initialProfilePageState = {\r\n   profileUserInfo: {\r\n      userId: 0,\r\n      aboutMe: \"\",\r\n      fullName: \"\",\r\n      lookingForAJob: false,\r\n      lookingForAJobDescription: \"\",\r\n      photos: {\r\n         small: \"\",\r\n         large: \"\",\r\n      },\r\n      contacts: {\r\n         vk: \"\",\r\n         github: \"\",\r\n         twitter: \"\",\r\n         website: \"\",\r\n         youtube: \"\",\r\n         facebook: \"\",\r\n         mainLink: \"\",\r\n         instagram: \"\",\r\n      }\r\n   } as ProfileUserInfoType,\r\n   status: \"\",\r\n   posts: [\r\n      {id: v1(), message: \"Hello\", like: 10},\r\n      {id: v1(), message: \"Hello\", like: 20},\r\n      {id: v1(), message: \"Hello\", like: 30},\r\n   ] as PostsType[],\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialProfilePageState, action: ActionCreatorsType): ProfilePageType => {\r\n   switch (action.type) {\r\n      case PROFILE_ACTIONS_TYPES.ADD_POST:\r\n         return {\r\n            ...state,\r\n            posts: [\r\n               ...state.posts,\r\n               {id: v1(), message: action.post, like: 0}\r\n            ],\r\n         }\r\n      case PROFILE_ACTIONS_TYPES.SET_PROFILE_USER_INFO:\r\n         return {\r\n            ...state,\r\n            profileUserInfo: action.profileUserInfo\r\n         }\r\n      case PROFILE_ACTIONS_TYPES.SET_PROFILE_STATUS:\r\n         return {\r\n            ...state,\r\n            status: action.status\r\n         }\r\n      case PROFILE_ACTIONS_TYPES.SET_PROFILE_PHOTOS:\r\n         return {\r\n            ...state,\r\n            profileUserInfo: {...state.profileUserInfo, photos: action.photos}\r\n         }\r\n      default: return state\r\n   }\r\n}\r\n\r\nexport type ProfilePageType = typeof initialProfilePageState\r\nexport type ProfileUserInfoType = {\r\n   userId: number\r\n   aboutMe: string\r\n   fullName: string\r\n   photos: PhotosType\r\n   contacts: ContactsType\r\n   lookingForAJob: boolean\r\n   lookingForAJobDescription: string\r\n}\r\nexport type PhotosType = {\r\n   small: string\r\n   large: string\r\n}\r\nexport type ContactsType = {\r\n   vk: string\r\n   github: string\r\n   twitter: string\r\n   website: string\r\n   youtube: string\r\n   mainLink: string\r\n   facebook: string\r\n   instagram: string\r\n}","import {ActionCreatorsType} from \"../redax-store\";\r\nimport {PEOPLES_ACTIONS_TYPES} from \"./peoplesActions\";\r\nimport {updateObjectInArray} from \"../../Components/Commons/Utils/functions-helpers\";\r\nimport {PeopleType} from \"../../api/api\";\r\n\r\nexport type PeoplesPageType = {\r\n   peoples: PeopleType[] | []\r\n   totalCount: number\r\n   currentPage: number\r\n   countPeoplesOnPage: number\r\n   isFetching: boolean\r\n   flag: boolean\r\n   isFollowing: boolean\r\n   following_ID: number[]\r\n}\r\n\r\nconst initialPeoplesPageState: PeoplesPageType = {\r\n   peoples: [],\r\n   totalCount: 0,\r\n   currentPage: 1,\r\n   countPeoplesOnPage: 15,\r\n   isFetching: false,\r\n   flag: false,\r\n   isFollowing: false,\r\n   following_ID: [],\r\n}\r\n\r\nexport const peoplesReducer = (state: PeoplesPageType = initialPeoplesPageState, action: ActionCreatorsType): PeoplesPageType => {\r\n   switch (action.type) {\r\n      case PEOPLES_ACTIONS_TYPES.SET_PEOPLES:\r\n         return { ...state, peoples: [...action.peoples] }\r\n      case PEOPLES_ACTIONS_TYPES.FOLLOW:\r\n         return {\r\n            ...state,\r\n            peoples: updateObjectInArray(state.peoples, action.people_ID, \"id\", {followed: true}),\r\n            flag: action.flag\r\n         }\r\n      case PEOPLES_ACTIONS_TYPES.UNFOLLOW:\r\n         return {\r\n            ...state,\r\n            peoples: updateObjectInArray(state.peoples, action.people_ID, \"id\", {followed: false}),\r\n            flag: action.flag\r\n         }\r\n      case PEOPLES_ACTIONS_TYPES.SET_TOTAL_COUNT:\r\n         return { ...state, totalCount: action.totalCount }\r\n      case PEOPLES_ACTIONS_TYPES.SET_CURRENT_PAGE:\r\n         return { ...state, currentPage: action.currentPage }\r\n      case PEOPLES_ACTIONS_TYPES.SET_IS_FETCHING:\r\n         return { ...state, isFetching: action.isFetching }\r\n      case PEOPLES_ACTIONS_TYPES.SET_IS_FOLLOWING:\r\n         return {\r\n            ...state,\r\n            following_ID: action.isFollowing\r\n               ? [...state.following_ID, action.followUser_ID]\r\n               : state.following_ID.filter(id => id !== action.followUser_ID)\r\n         }\r\n      case PEOPLES_ACTIONS_TYPES.SET_COUNT_PEOPLES_ON_PAGE:\r\n         return {\r\n            ...state,\r\n            countPeoplesOnPage: action.countPeoplesOnPage\r\n         }\r\n      default: return state\r\n   }\r\n}\r\n\r\n","import {ActionCreatorsType} from \"../redax-store\";\r\nimport {AUTH_ACTIONS_TYPES} from \"./authActions\";\r\nimport {PhotosType} from \"../profile/profileReducer\";\r\nimport {PROFILE_ACTIONS_TYPES} from \"../profile/profileActions\";\r\n\r\nexport type UserLoggedType = {\r\n   id: number | null\r\n   email: string | null\r\n   login: string | null\r\n   isAuth: boolean\r\n   photos: PhotosType | null\r\n   captchaUrl: string | null\r\n}\r\nexport type UserLoginType = {\r\n   email: string | null\r\n   password: string | null\r\n   rememberMe: boolean\r\n   captcha: string | null\r\n}\r\n\r\nconst initialAuthState: UserLoggedType = {\r\n   id: null,\r\n   email: null,\r\n   login: null,\r\n   isAuth: false,\r\n   photos: null,\r\n   captchaUrl: null\r\n}\r\n\r\nexport const authReducer = (state: UserLoggedType = initialAuthState, action: ActionCreatorsType): UserLoggedType => {\r\n   switch (action.type) {\r\n      case AUTH_ACTIONS_TYPES.SET_AUTH_DATA:\r\n      case AUTH_ACTIONS_TYPES.SET_CAPTCHA_URL:\r\n         return {\r\n            ...state,\r\n            ...action.payload\r\n         }\r\n      case PROFILE_ACTIONS_TYPES.SET_PROFILE_PHOTOS:\r\n         return {\r\n            ...state,\r\n            photos: action.photos\r\n         }\r\n      default: return state\r\n   }\r\n}","import {ActionCreatorsType} from \"../redax-store\";\r\nimport {MESSAGES_ACTIONS_TYPES} from \"./messagesActions\";\r\n\r\nconst initialMessagesPageState = {\r\n   users: [\r\n      {\r\n         userId: \"user1\",\r\n         author: \"bla bla\",\r\n         avatar: \"\"\r\n      }\r\n   ] as UserType[],\r\n   usersMessages: {\r\n      [\"user1\"]: [\r\n         {\r\n            author: \"\",\r\n            content: \"We supply a serlity design resources (Sketch and Axure).\",\r\n            avatar: \"\",\r\n            datetime: \"\"\r\n         },\r\n         {\r\n            author: \"\",\r\n            content: \"We supply a series of design principles, practical pattees (Sketch and Axure).\",\r\n            avatar: \"\",\r\n            datetime: \"\"\r\n         },\r\n         {\r\n            author: \"\",\r\n            content: \"We supply a series of design principles, practical patterns andsources (Sketch and Axure).\",\r\n            avatar: \"\",\r\n            datetime: \"\"\r\n         },\r\n      ],\r\n   } as UsersMessagesType,\r\n}\r\n\r\nexport type MessagesPageType = typeof initialMessagesPageState\r\n\r\nexport const messagesReducer = (state: MessagesPageType = initialMessagesPageState, action: ActionCreatorsType): MessagesPageType => {\r\n   switch (action.type) {\r\n      case MESSAGES_ACTIONS_TYPES.ADD_MESSAGE:\r\n         return {\r\n            ...state,\r\n            users: [\r\n               ...state.users,\r\n               {\r\n                  userId: action.payload.id,\r\n                  author: action.payload.name,\r\n                  avatar: action.payload.photo,\r\n               }\r\n            ],\r\n            usersMessages: {\r\n               ...state.usersMessages,\r\n               [action.payload.id]: []\r\n            }\r\n         }\r\n      case MESSAGES_ACTIONS_TYPES.SEND_MESSAGE:\r\n         if (action.payload.id) {\r\n            return {\r\n               ...state,\r\n               usersMessages: {\r\n                  ...state.usersMessages,\r\n                  [action.payload.id]: [...state.usersMessages[action.payload.id], {\r\n                     author: action.payload.message.author,\r\n                     content: action.payload.message.content,\r\n                     avatar: action.payload.message.avatar,\r\n                     datetime: action.payload.message.datetime\r\n                  }]\r\n               }\r\n            }\r\n         } else {\r\n            return {\r\n               ...state\r\n            }\r\n         }\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\nexport type UserType = {\r\n   userId: string\r\n   author: string\r\n   avatar: string\r\n}\r\n\r\nexport type UsersMessagesType = {\r\n   [userId: string]: MessageType[]\r\n}\r\n\r\nexport type MessageType = {\r\n   content: any | null\r\n   author: string | null\r\n   avatar: string | null\r\n   datetime: string | null\r\n}\r\n\r\n","import {APP_ACTIONS_TYPES, AppActionCreatorsType} from \"./appActions\";\r\n\r\nexport type AppPageType = {\r\n   isInitialized: boolean\r\n}\r\n\r\nconst initialAuthState: AppPageType = {\r\n   isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: AppPageType = initialAuthState, action: AppActionCreatorsType): AppPageType => {\r\n   switch (action.type) {\r\n      case APP_ACTIONS_TYPES.SET_IS_INITIALIZE:\r\n         return {\r\n            ...state,\r\n            ...action.payload\r\n         }\r\n      default:\r\n         return state\r\n   }\r\n}","import {combineReducers} from '@reduxjs/toolkit'\r\nimport {profileReducer} from \"./profile/profileReducer\";\r\nimport {ProfileActionCreatorsType} from \"./profile/profileActions\";\r\nimport {peoplesReducer} from \"./peoples/peoplesReducer\";\r\nimport {PeoplesActionCreatorsType,} from \"./peoples/peoplesActions\";\r\nimport {MessagesActionCreatorsType} from \"./messages/messagesActions\";\r\nimport {authReducer} from \"./auth/authReducer\";\r\nimport {AuthActionCreatorsType} from \"./auth/authActions\";\r\nimport thunk, {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from '@redux-devtools/extension';\r\nimport {messagesReducer} from \"./messages/MessagesReducer\";\r\nimport {appReducer} from \"./app/appReducer\";\r\nimport {AppActionCreatorsType} from \"./app/appActions\";\r\n\r\nconst rootReducer = combineReducers({\r\n   profilePage: profileReducer,\r\n   messagesPage: messagesReducer,\r\n   peoplesPage: peoplesReducer,\r\n   authState: authReducer,\r\n   appState: appReducer,\r\n})\r\n\r\nexport const store = createStore(\r\n   rootReducer,\r\n   composeWithDevTools( applyMiddleware(thunk) )\r\n)\r\n\r\nexport type ActionCreatorsType =\r\n   | AuthActionCreatorsType\r\n   | MessagesActionCreatorsType\r\n   | PeoplesActionCreatorsType\r\n   | ProfileActionCreatorsType\r\n   | AppActionCreatorsType\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type ThunkType<T = void> = ThunkAction<Promise<T>, RootState, unknown, ActionCreatorsType>\r\nexport type ThunkDispatchType = ThunkDispatch<RootState, unknown, ActionCreatorsType>;\r\n\r\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport App from \"./Components/App\";\nimport {store} from \"./redux/redax-store\";\nimport {Provider} from \"react-redux\";\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n   <React.StrictMode>\n      <Provider store={store}>\n         <BrowserRouter>\n            <App/>\n         </BrowserRouter>\n      </Provider>\n   </React.StrictMode>,\n   document.getElementById('root')\n)","// import {PeopleType} from \"../../Components/Content/Peoples/People/People\";\r\n\r\nimport {PeopleType} from \"../../api/api\";\r\n\r\nexport enum PEOPLES_ACTIONS_TYPES {\r\n   SET_PEOPLES = 'peoplesReducer/SET_PEOPLES',\r\n   FOLLOW = 'peoplesReducer/FOLLOW',\r\n   UNFOLLOW = 'peoplesReducer/UNFOLLOW',\r\n   SET_TOTAL_COUNT = 'peoplesReducer/SET_TOTAL_COUNT',\r\n   SET_CURRENT_PAGE = 'peoplesReducer/SET_CURRENT_PAGE',\r\n   SET_IS_FETCHING = 'peoplesReducer/SET_IS_FETCHING',\r\n   SET_IS_FOLLOWING = 'peoplesReducer/SET_IS_FOLLOWING',\r\n   SET_COUNT_PEOPLES_ON_PAGE = 'peoplesReducer/SET_COUNT_PEOPLES_ON_PAGE',\r\n}\r\n\r\nexport type PeoplesActionCreatorsType =\r\n   ReturnType<typeof followSuccess>\r\n   | ReturnType<typeof unfollowSuccess>\r\n   | ReturnType<typeof setPeoples>\r\n   | ReturnType<typeof setTotalCount>\r\n   | ReturnType<typeof setCurrentPage>\r\n   | ReturnType<typeof setIsFetching>\r\n   | ReturnType<typeof setIsFollowing>\r\n   | ReturnType<typeof setCountPeoplesOnPage>\r\n\r\nexport const followSuccess = (people_ID: number, flag: boolean) => ({type: PEOPLES_ACTIONS_TYPES.FOLLOW, people_ID, flag} as const)\r\nexport const unfollowSuccess = (people_ID: number, flag: boolean) => ({type: PEOPLES_ACTIONS_TYPES.UNFOLLOW, people_ID, flag} as const)\r\nexport const setPeoples = (peoples: PeopleType[]) => ({type: PEOPLES_ACTIONS_TYPES.SET_PEOPLES, peoples} as const)\r\nexport const setTotalCount = (totalCount: number) => ({type: PEOPLES_ACTIONS_TYPES.SET_TOTAL_COUNT, totalCount} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: PEOPLES_ACTIONS_TYPES.SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: PEOPLES_ACTIONS_TYPES.SET_IS_FETCHING, isFetching} as const)\r\nexport const setIsFollowing = (isFollowing: boolean, followUser_ID: number) => ({type: PEOPLES_ACTIONS_TYPES.SET_IS_FOLLOWING, isFollowing, followUser_ID} as const)\r\nexport const setCountPeoplesOnPage = (currentPage: number, countPeoplesOnPage: number) => ({type: PEOPLES_ACTIONS_TYPES.SET_COUNT_PEOPLES_ON_PAGE, currentPage, countPeoplesOnPage} as const)\r\n","import {RootState} from \"../redax-store\";\r\nimport {PhotosType} from \"../profile/profileReducer\";\r\n\r\nexport const getId = (state: RootState): number | null => state.authState.id\r\nexport const getEmail = (state: RootState): string | null => state.authState.email\r\nexport const getLogin = (state: RootState): string | null => state.authState.login\r\nexport const getIsAuth = (state: RootState): boolean => state.authState.isAuth\r\nexport const getProfilePhotos = (state: RootState): PhotosType | null => state.authState.photos\r\nexport const getCaptchaUrl = (state: RootState): string | null => state.authState.captchaUrl","import axios from \"axios\";\r\nimport {UserLoginType} from \"../redux/auth/authReducer\";\r\nimport {ProfileUserInfoType} from \"../redux/profile/profileReducer\";\r\n\r\nconst instanceAxios = axios.create({\r\n   withCredentials: true,\r\n   baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n   headers: {\"API-KEY\": \"0b35bf30-9811-4ef2-8cc3-183ac4bf4914\"},\r\n})\r\n\r\nexport const userAPI = {\r\n   getUsers: (countPeoplesOnPage: number, currentPage: number) => {\r\n      return instanceAxios.get<GetUsersResponseType>(`users?count=${countPeoplesOnPage}&page=${currentPage}`)\r\n         .then(response => response.data)\r\n   },\r\n   setFollow: (userID: number) => {\r\n      return instanceAxios.post<CommonResponseType>(`follow/${userID}`).then(response => response.data)\r\n   },\r\n   setUnfollow: (userID: number) => {\r\n      return instanceAxios.delete<CommonResponseType>(`follow/${userID}`).then(response => response.data)\r\n   },\r\n}\r\n\r\nexport const profileAPI = {\r\n   getProfile: (userID: string) => {\r\n      return instanceAxios.get<ProfileUserInfoType>(`profile/${userID}`).then(response => response.data)\r\n   },\r\n   getStatus: (userID: string) => {\r\n      return instanceAxios.get<string>(`profile/status/${userID}`).then(response => response.data)\r\n   },\r\n   updateStatus: (status: string) => {\r\n      return instanceAxios.put<CommonResponseType>(`profile/status`, {status}).then(response => response.data)\r\n   },\r\n   uploadPhoto: (file: any) => {\r\n      const formData = new FormData();\r\n      formData.append('file', file)\r\n      const config = {\r\n         headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n         }\r\n      }\r\n      return instanceAxios.put<CommonResponseType<{ small: string, large: string }>>('profile/photo', formData, config).then(response => response.data)\r\n   },\r\n   updateProfile: (profileData: ProfileUserInfoType) => {\r\n      return instanceAxios.put<CommonResponseType>(`profile`, profileData).then(response => response.data)\r\n   },\r\n}\r\n\r\nexport const authAPI = {\r\n   getLoggedData: () => {\r\n      return instanceAxios.get<CommonResponseType<{ id: number, email: string, login: string }>>('auth/me').then(response => response.data)\r\n   },\r\n   logIn: (loginData: UserLoginType) => {\r\n      return instanceAxios.post<CommonResponseType<{ userId: number }>>('auth/login', loginData).then(response => response.data)\r\n   },\r\n   logOut: () => {\r\n      return instanceAxios.delete<CommonResponseType>('/auth/login', {}).then(response => response.data)\r\n   }\r\n}\r\n\r\nexport const securityAPI = {\r\n   getCaptchaURL: () => {\r\n      return instanceAxios.get<{url: string}>('/security/get-captcha-url').then(response => response.data)\r\n   }\r\n}\r\n\r\nexport type CommonResponseType<T = {}> = {\r\n   resultCode: number\r\n   messages: string[]\r\n   data: T\r\n}\r\ntype GetUsersResponseType = {\r\n   items: PeopleType[]\r\n   totalCount: number\r\n   error: string\r\n}\r\nexport type PeopleType = {\r\n   id: number\r\n   name: string\r\n   status: string\r\n   photos: { small: string, large: string }\r\n   followed: boolean\r\n}","import {setProfilePhoto} from \"../profile/profileActions\";\r\n\r\nexport enum AUTH_ACTIONS_TYPES {\r\n   SET_AUTH_DATA = 'authReducer/SET_AUTH_DATA',\r\n   SET_CAPTCHA_URL = 'authReducer/SET_CAPTCHA_URL',\r\n}\r\n\r\nexport type AuthActionCreatorsType =\r\n   | ReturnType<typeof setAuthData>\r\n   | ReturnType<typeof setCaptchaUrl>\r\n   | ReturnType<typeof setProfilePhoto>\r\n\r\n\r\nexport const setAuthData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n   {\r\n      type: AUTH_ACTIONS_TYPES.SET_AUTH_DATA,\r\n      payload: {id, email, login, isAuth,}\r\n   } as const)\r\n\r\nexport const setCaptchaUrl = (captchaUrl: string | null) => (\r\n   {\r\n      type: AUTH_ACTIONS_TYPES.SET_CAPTCHA_URL,\r\n      payload: {captchaUrl}\r\n   } as const)\r\n","import {UserLoginType} from \"./authReducer\";\nimport {setIsInitialize} from \"../app/appActions\";\nimport {authAPI, securityAPI} from \"../../api/api\";\nimport {setAuthData, setCaptchaUrl} from \"./authActions\";\nimport {setProfilePhoto} from \"../profile/profileActions\";\nimport {getProfileUserInfo} from \"../profile/profileThunk\";\nimport {ThunkDispatchType, ThunkType} from \"../redax-store\";\n\nexport const getLogInData = (loginData: UserLoginType): ThunkType =>\n   async (dispatch: ThunkDispatchType): Promise<any> => {\n      try {\n         let data = await authAPI.logIn(loginData)\n         if (data.resultCode === 0) {\n            await dispatch(getAppData())\n         } else {\n            if (data.resultCode === 10) {\n               await dispatch(getCaptchaUrl())\n            }\n         }\n         return data\n      } catch (e) {\n         console.log(\"authThunk -> getLogInData \", e)\n      }\n   }\n\nexport const getLogOutData = (): ThunkType =>\n   async (dispatch: ThunkDispatchType) => {\n      try {\n         let data = await authAPI.logOut()\n         if (data.resultCode === 0) {\n            dispatch(setAuthData(null, null, null, false))\n         }\n      } catch (e) {\n         console.log(\"authThunk -> getLogOutData \", e)\n      }\n   }\n\nexport const getAppData = (): ThunkType =>\n   async (dispatch: ThunkDispatchType) => {\n      try {\n         let data = await authAPI.getLoggedData()\n         if (data.resultCode === 0) {\n            const {id, email, login} = data.data\n            dispatch(setAuthData(id, email, login, true))\n            const profileData = await dispatch(getProfileUserInfo(id))\n            if (profileData) {\n               dispatch(setProfilePhoto(profileData.photos))\n            }\n\n         }\n      } catch (e) {\n         console.log(\"authThunk -> getAppData \", e)\n      } finally {\n         dispatch(setIsInitialize(true))\n      }\n   }\n\nexport const getCaptchaUrl = (): ThunkType =>\n   async (dispatch: ThunkDispatchType) => {\n      try {\n         let data = await securityAPI.getCaptchaURL()\n         dispatch(setCaptchaUrl(data.url))\n      } catch (e) {\n         console.log(\"authThunk -> getCaptchaUrl \", e)\n      }\n   }"],"sourceRoot":""}