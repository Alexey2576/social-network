{"version":3,"sources":["assets/ava.png","redux/messages/messagesThunk.ts","Components/Content/Peoples/PeopleFollowUnfollow/PeopleFollowUnfollow.tsx","Components/Content/Peoples/Peoples.tsx","redux/peoples/peoplesSelectors.ts","Components/Content/Peoples/ContainerPeoples.tsx","redux/peoples/peoplesThunk.ts"],"names":["sendNewMessage","id","author","avatar","content","dispatch","a","Promise","resolve","setTimeout","obj","datetime","moment","fromNow","userId","toString","addUserMessageAC","sendUserMessageAC","sendMessage","getState","photos","authState","authId","small","login","PeopleFollowUnfollow","memo","props","people","following_ID","unfollowCallback","followCallback","followed","disabled","some","className","style","border","padding","height","size","onClick","CloseCircleOutlined","CheckCircleOutlined","TextArea","Input","Peoples","peoples","pageSize","totalCount","onShowSizeChange","sendMessageCallback","setCurrentPageCallback","Meta","Card","React","useState","visible","setVisible","modalText","setModalText","confirmLoading","setConfirmLoading","modalUserInfo","setModalUserInfo","handleOk","then","catch","console","log","finally","display","flexWrap","alignItems","map","width","margin","cover","alt","src","large","ava","actions","EditOutlined","showModal","key","title","name","description","status","marginTop","total","onChange","onOk","onCancel","e","currentTarget","value","rows","placeholder","maxLength","getPeoplesFromState","state","peoplesPage","getTotalCount","getCurrentPage","currentPage","getPageSize","countPeoplesOnPage","getIsFetching","isFetching","getFlag","flag","getIsFollowing","isFollowing","getFollowing_ID","ContainerPeoples","componentDidMount","getPeoples","sendNewMessageCallback","userInfo","message","setSizePageCallback","setCountPeoplesOnPage","people_id","follow","unfollow","render","PureComponent","compose","connect","people_ID","followUnfollowFlow","userAPI","setFollow","followSuccess","setUnfollow","unfollowSuccess","getUsers","data","setPeoples","items","setTotalCount","setCurrentPage","withAuthRedirect"],"mappings":"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","file":"static/js/7.f530b88a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ava.c429bb80.png\";","import {addUserMessageAC, sendUserMessageAC} from \"./messagesActions\";\r\nimport {RootState, ThunkDispatchType, ThunkType} from \"../redax-store\";\r\nimport moment from \"moment\";\r\nimport {MessageType} from \"./MessagesReducer\";\r\n\r\nexport const sendNewMessage = (id: number, author: string, avatar: string, content: string): ThunkType =>\r\nasync (dispatch: ThunkDispatchType): Promise<any> => {\r\n      return new Promise((resolve) => {\r\n         setTimeout(() => {\r\n            const obj: MessageType & {userId: string} = {\r\n               avatar,\r\n               content,\r\n               author,\r\n               datetime: moment().fromNow(),\r\n               userId: id.toString(),\r\n            }\r\n            dispatch(addUserMessageAC(id.toString(), author, avatar));\r\n            dispatch(sendUserMessageAC(obj, id.toString()));\r\n            resolve(true);\r\n         }, 2000);\r\n      })\r\n   }\r\n\r\nexport const sendMessage = (id: string, content: string): ThunkType =>\r\nasync (dispatch: ThunkDispatchType, getState: () => RootState): Promise<any> => {\r\n      return new Promise((resolve) => {\r\n         setTimeout(() => {\r\n            const photos = getState().authState.photos\r\n            const authId = getState().authState.id;\r\n            const obj: MessageType & { userId: string } = {\r\n               avatar: photos ? photos.small : \"\" ,\r\n               content: content,\r\n               author: getState().authState.login,\r\n               datetime: moment().fromNow(),\r\n               userId: authId ? authId.toString() : \"\",\r\n            }\r\n            if (id) {\r\n               dispatch(sendUserMessageAC(obj, id));\r\n            }\r\n            resolve(true);\r\n         }, 2000);\r\n      })\r\n   }\r\n","import React, {FC, memo} from 'react';\r\nimport {Button} from \"antd\";\r\nimport {PeopleType} from \"../../../../api/api\";\r\nimport {CloseCircleOutlined, CheckCircleOutlined} from '@ant-design/icons';\r\n\r\nexport const PeopleFollowUnfollow: FC<PeopleFollowUnfollowType> = memo((\r\n   props\r\n) => {\r\n   const {\r\n      people,\r\n      following_ID,\r\n      unfollowCallback,\r\n      followCallback,\r\n   } = props\r\n   const onClickUnfollowHandler = () => unfollowCallback(people.id)\r\n   const onClickFollowHandler = () => followCallback(people.id)\r\n\r\n   return (\r\n      <div>\r\n         {\r\n            people.followed\r\n               ? <Button disabled={following_ID.some(id => id === people.id)}\r\n                         className=\"people_followed__btn\"\r\n                         style={{border: \"none\", padding: 0, height: 0}}\r\n                         size={\"large\"}\r\n                         onClick={onClickUnfollowHandler}><CloseCircleOutlined/></Button>\r\n               : <Button disabled={following_ID.some(id => id === people.id)}\r\n                         className=\"people_followed__btn\"\r\n                         style={{border: \"none\", padding: 0}}\r\n                         onClick={onClickFollowHandler}><CheckCircleOutlined /></Button>\r\n         }\r\n      </div>\r\n   );\r\n})\r\n\r\ntype PeopleFollowUnfollowType = {\r\n   following_ID: number[]\r\n   followCallback: (people_id: number) => void\r\n   unfollowCallback: (people_id: number) => void\r\n   people: PeopleType\r\n}","import {Input} from 'antd';\r\nimport ava from '../../../assets/ava.png'\r\nimport {PeopleType} from \"../../../api/api\";\r\nimport {Card, Modal, Pagination} from \"antd\";\r\nimport {EditOutlined} from '@ant-design/icons';\r\nimport React, {ChangeEvent, FC, FormEvent, memo} from \"react\";\r\nimport {PeopleFollowUnfollow} from \"./PeopleFollowUnfollow/PeopleFollowUnfollow\";\r\n\r\nconst {TextArea} = Input;\r\n\r\nexport const Peoples: FC<PeoplesType> = memo((props) => {\r\n   const {\r\n      peoples,\r\n      pageSize,\r\n      totalCount,\r\n      onShowSizeChange,\r\n      sendMessageCallback,\r\n      setCurrentPageCallback,\r\n   } = props\r\n   const {Meta} = Card;\r\n\r\n   const [visible, setVisible] = React.useState(false);\r\n   const [modalText, setModalText] = React.useState(\"\");\r\n   const [confirmLoading, setConfirmLoading] = React.useState(false);\r\n   const [modalUserInfo, setModalUserInfo] = React.useState<PeopleType | null>(null);\r\n\r\n   const showModal = (people: PeopleType) => {\r\n      setModalUserInfo(people)\r\n      setVisible(true)\r\n   }\r\n   const onChangeModalText = (e: ChangeEvent<HTMLTextAreaElement>) => setModalText(e.currentTarget.value)\r\n   const handleOk = async () => {\r\n      setConfirmLoading(true);\r\n      if (modalUserInfo) {\r\n         await sendMessageCallback(modalUserInfo, modalText)\r\n            .then(() => {\r\n               setVisible(false);\r\n               setModalText(\"\")\r\n            })\r\n            .catch(() => {\r\n               console.log(\"error\")\r\n            })\r\n            .finally(() => {\r\n               setConfirmLoading(false);\r\n            })\r\n      }\r\n   };\r\n\r\n   const handleCancel = () => setVisible(false)\r\n\r\n   return (\r\n      <div style={{\r\n         display: \"flex\",\r\n         flexWrap: \"wrap\",\r\n         alignItems: \"center\",\r\n      }}>\r\n         {peoples.map(people => {\r\n            return (\r\n               <div>\r\n                  <Card\r\n                     style={{width: 300, margin: \"20px 10px\"}}\r\n                     cover={\r\n                        <img\r\n                           alt=\"example\"\r\n                           src={people.photos.large || ava}\r\n                        />\r\n                     }\r\n                     actions={[\r\n                        <EditOutlined onClick={() => showModal(people)} key=\"edit\"/>,\r\n                        <PeopleFollowUnfollow\r\n                           {...props}\r\n                           people={people}\r\n                           key={`${people.id}-followUnfollow`}\r\n                        />\r\n                     ]}\r\n                  >\r\n                     <Meta\r\n                        title={people.name}\r\n                        description={people.status}\r\n                     />\r\n                  </Card>\r\n\r\n               </div>\r\n            )\r\n         })}\r\n         <Pagination\r\n            style={{marginTop: \"20px\"}}\r\n            total={totalCount}\r\n            pageSize={pageSize}\r\n            onChange={setCurrentPageCallback}\r\n            onShowSizeChange={onShowSizeChange}\r\n         />\r\n\r\n         <Modal\r\n            title={`Send message ${modalUserInfo ? modalUserInfo.name : \"User name\"}`}\r\n            visible={visible}\r\n            onOk={handleOk}\r\n            confirmLoading={confirmLoading}\r\n            onCancel={handleCancel}\r\n         >\r\n            <TextArea\r\n               onChange={onChangeModalText}\r\n               rows={4}\r\n               placeholder=\"Write message\"\r\n               maxLength={200}\r\n               value={modalText}/>\r\n         </Modal>\r\n      </div>\r\n   )\r\n})\r\n\r\nexport type PeoplesType = {\r\n   pageSize: number\r\n   totalCount: number\r\n   peoples: PeopleType[]\r\n   following_ID: number[]\r\n   sendMessageCallback: (userInfo: PeopleType, message: string) => Promise<any>\r\n   followCallback: (people_id: number) => void\r\n   unfollowCallback: (people_id: number) => void\r\n   setCurrentPageCallback: (currentPage: number) => void\r\n   onShowSizeChange: (current: number, size: number) => void\r\n}","import {RootState} from \"../redax-store\";\r\nimport {PeopleType} from \"../../api/api\";\r\n\r\nexport const getPeoplesFromState = (state: RootState): PeopleType[] | [] => state.peoplesPage.peoples\r\nexport const getTotalCount = (state: RootState): number => state.peoplesPage.totalCount\r\nexport const getCurrentPage = (state: RootState): number => state.peoplesPage.currentPage\r\nexport const getPageSize = (state: RootState): number => state.peoplesPage.countPeoplesOnPage\r\nexport const getIsFetching = (state: RootState): boolean => state.peoplesPage.isFetching\r\nexport const getFlag = (state: RootState): boolean => state.peoplesPage.flag\r\nexport const getIsFollowing = (state: RootState): boolean => state.peoplesPage.isFollowing\r\nexport const getFollowing_ID = (state: RootState): number[] => state.peoplesPage.following_ID","import {RootState} from \"../../../redux/redax-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Peoples} from \"./Peoples\";\r\nimport React, {ComponentType} from 'react';\r\nimport {follow, getPeoples, unfollow} from \"../../../redux/peoples/peoplesThunk\";\r\nimport {compose} from \"@reduxjs/toolkit\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {\r\n   getCurrentPage,\r\n   getFlag,\r\n   getFollowing_ID,\r\n   getIsFetching,\r\n   getIsFollowing,\r\n   getPageSize,\r\n   getPeoplesFromState,\r\n   getTotalCount\r\n} from \"../../../redux/peoples/peoplesSelectors\";\r\nimport {Spin} from \"antd\";\r\nimport {setCountPeoplesOnPage} from \"../../../redux/peoples/peoplesActions\";\r\nimport {PeopleType} from \"../../../api/api\";\r\nimport {sendNewMessage} from \"../../../redux/messages/messagesThunk\";\r\n\r\nclass ContainerPeoples extends React.PureComponent<ContainerPeoplePropsType> {\r\n   componentDidMount = () => {\r\n      this.props.getPeoples(this.props.pageSize, this.props.currentPage)\r\n   }\r\n\r\n   sendNewMessageCallback =  async (userInfo: PeopleType, message: string) => {\r\n      const {id, name, photos} = userInfo\r\n      return await this.props.sendNewMessage(id, name, photos.small, message)\r\n   }\r\n   setCurrentPageCallback = (currentPage: number) => this.props.getPeoples(this.props.pageSize, currentPage)\r\n   setSizePageCallback = (currentPage: number, size: number) => {\r\n      this.props.setCountPeoplesOnPage(currentPage, size)\r\n   }\r\n   followCallback = (people_id: number) => this.props.follow(people_id, !this.props.flag)\r\n   unfollowCallback = (people_id: number) => this.props.unfollow(people_id, !this.props.flag)\r\n\r\n   render = () => {\r\n      return (\r\n         <>\r\n            {this.props.isFetching && <Spin size={\"large\"}/>}\r\n            <Peoples\r\n               {...this.props}\r\n               sendMessageCallback={this.sendNewMessageCallback}\r\n               followCallback={this.followCallback}\r\n               unfollowCallback={this.unfollowCallback}\r\n               onShowSizeChange={this.setSizePageCallback}\r\n               setCurrentPageCallback={this.setCurrentPageCallback}\r\n            />\r\n         </>\r\n      )\r\n   }\r\n}\r\n\r\nexport type ContainerPeoplePropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n   peoples: PeopleType[] | []\r\n   totalCount: number\r\n   currentPage: number\r\n   pageSize: number\r\n   isFetching: boolean\r\n   flag: boolean\r\n   isFollowing: boolean\r\n   following_ID: number[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n   follow(people_ID: number, flag: boolean): void\r\n   unfollow(people_ID: number, flag: boolean): void\r\n   getPeoples(countPeoplesOnPage: number, currentPage: number): void\r\n   setCountPeoplesOnPage(currentPage: number, countPeoplesOnPage: number): void\r\n   sendNewMessage(id: number, author: string, avatar: string, content: string): Promise<any>\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\r\n   return {\r\n      peoples: getPeoplesFromState(state),\r\n      totalCount: getTotalCount(state),\r\n      currentPage: getCurrentPage(state),\r\n      pageSize: getPageSize(state),\r\n      isFetching: getIsFetching(state),\r\n      flag: getFlag(state),\r\n      isFollowing: getIsFollowing(state),\r\n      following_ID: getFollowing_ID(state),\r\n   }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n   connect(mapStateToProps, {follow, unfollow, getPeoples, setCountPeoplesOnPage, sendNewMessage}),\r\n   withAuthRedirect,\r\n)(ContainerPeoples)","import {\r\n   followSuccess,\r\n   setCurrentPage,\r\n   setPeoples,\r\n   setTotalCount,\r\n   unfollowSuccess\r\n} from \"./peoplesActions\";\r\nimport {ThunkDispatchType, ThunkType} from \"../redax-store\";\r\nimport {userAPI} from \"../../api/api\";\r\nimport {followUnfollowFlow} from \"../../Components/Commons/Utils/functions-helpers\";\r\n\r\nexport const getPeoples = (countPeoplesOnPage: number, currentPage: number): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n   try {\r\n      let data = await userAPI.getUsers(countPeoplesOnPage, currentPage)\r\n      dispatch(setPeoples(data.items))\r\n      dispatch(setTotalCount(data.totalCount))\r\n      dispatch(setCurrentPage(currentPage))\r\n   } catch (e) {\r\n      console.log(\"peoplesThunk -> getPeoples \", e)\r\n   }\r\n}\r\n\r\nexport const unfollow = (people_ID: number, flag: boolean): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n   await followUnfollowFlow(people_ID, flag, dispatch, userAPI.setUnfollow(people_ID), unfollowSuccess)\r\n}\r\nexport const follow = (people_ID: number, flag: boolean): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n   await followUnfollowFlow(people_ID, flag, dispatch, userAPI.setFollow(people_ID), followSuccess)\r\n}"],"sourceRoot":""}