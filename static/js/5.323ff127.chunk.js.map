{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","hoc/withAuthRedirect.tsx","Components/Content/Profile/profile.module.scss","assets/ava.png","Components/Content/Profile/Posts/Post/post.module.scss","Components/Content/Profile/ProfileInfo/Status/Status.tsx","Components/Commons/ErrorBoundary/ErrorBoundary.tsx","Components/Content/Profile/ProfileInfo/ProfileUserInfo.tsx","Components/Content/Profile/ProfileForm/ProfileForm.tsx","Components/Content/Profile/Posts/Post/Post.tsx","Components/Content/Profile/Posts/Posts.tsx","Components/Content/Profile/Profile.tsx","redux/profile/profileThunk.ts","redux/profile/profileSelectors.ts","Components/Content/Profile/ContainerProfile.tsx","hoc/withRouter.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","mapStateToProps","state","isAuth","authState","withAuthRedirect","Component","connect","props","restProps","module","exports","Status","React","memo","status","authId","userIdFromURL","updateStatusCallback","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","autoFocus","type","value","onBlur","onChange","e","currentTarget","Number","onDoubleClick","onClick","ErrorBoundary","error","errorInfo","this","setState","style","whiteSpace","toString","componentStack","children","ProfileUserInfo","profileUserInfo","updatePhotoCallback","updateProfileDataCallback","statusProps","fullName","userId","photos","contacts","keys","onSubmitHandler","profileData","a","data","resultCode","FORM_ERROR","messages","className","s","profile__info","profile__info_img","src","large","ava","alt","files","profile__info_text","github","onSubmit","contactsKeys","initialValues","ProfileData","aboutMe","lookingForAJob","lookingForAJobDescription","map","contactKey","Contact","ProfileDataForm","render","handleSubmit","submitError","FieldForm","placeholder","name","color","ProfileForm","addPostCallback","profile__addPost","post","messages__addPost_btn","Post","post_message","message","post_like","like","Posts","posts","profile__postTitle","profile__posts","p","id","Profile","profileUserInfoProps","profile","getProfileUserInfo","userID","dispatch","profileAPI","getProfile","setProfileUserInfo","console","log","getUserInfo","profilePage","getPosts","getAuthId","getStatus","ContainerProfile","loadProfileData","getProfileStatus","componentDidMount","componentDidUpdate","prevProps","prevId","prevLargePhoto","largePhoto","addPost","updateProfileStatus","file","uploadProfilePhoto","updateProfileData","compose","addPostAC","setProfileStatus","updateStatus","uploadPhoto","setProfilePhoto","getState","updateProfile","useParams","navigate","useNavigate"],"mappings":"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","file":"static/js/5.323ff127.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import {RootState} from \"../redux/redax-store\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport ContainerLogin from \"../Components/Content/Login/ContainerLogin\";\r\n\r\ntype MapStateToPropsType = {\r\n   isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\r\n   return {\r\n      isAuth: state.authState.isAuth\r\n   }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n   const ComponentWithAuthRedirectProp = (props: MapStateToPropsType) => {\r\n      let {isAuth, ...restProps} = props\r\n      if (!isAuth) return <ContainerLogin/>\r\n      return <Component {...restProps as T}/>\r\n   }\r\n   return connect(mapStateToProps)(ComponentWithAuthRedirectProp)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile_profile__2gMKd\",\"profile__postTitle\":\"profile_profile__postTitle__H2b-o\",\"profile__info\":\"profile_profile__info__1_Kve\",\"profile__info_img\":\"profile_profile__info_img__3MAes\",\"profile__info_text\":\"profile_profile__info_text__jjPkj\",\"profile__posts\":\"profile_profile__posts__15hxo\",\"profile__addPost\":\"profile_profile__addPost__3MWLG\",\"profile__addPost_input\":\"profile_profile__addPost_input__1wZ-Y\",\"profile__addPost_btn\":\"profile_profile__addPost_btn__1Nt5B\"};","export default __webpack_public_path__ + \"static/media/ava.c429bb80.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__2yxHn\",\"post_message\":\"post_post_message__2IZXH\",\"post_like\":\"post_post_like__8OBoH\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\nexport const Status: React.FC<StatusType> = React.memo((props) => {\r\n   const { status, authId, userIdFromURL, updateStatusCallback, } = props\r\n\r\n   const [editMode, setEditMode] = useState(false)\r\n   const [newStatus, setNewStatus] = useState<string>(\"\")\r\n\r\n   useEffect(() => {\r\n      if (status)\r\n         setNewStatus(status)\r\n      else setNewStatus(\"\")\r\n   }, [status])\r\n\r\n   const onDoubleClickHandler = () => {\r\n      if (authId === Number(userIdFromURL))\r\n         setEditMode(true)\r\n   }\r\n   const onBlurHandler = () => {\r\n      updateStatusCallback(newStatus)\r\n      setEditMode(false)\r\n   }\r\n   const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setNewStatus(e.currentTarget.value)\r\n   const onClickHandler = () => setEditMode(true)\r\n\r\n   return (\r\n      <>{\r\n         editMode\r\n            ? <input autoFocus\r\n                   type=\"text\"\r\n                   value={newStatus}\r\n                   onBlur={onBlurHandler}\r\n                   onChange={onChangeHandler}\r\n               />\r\n            : (\r\n               !status && authId === Number(userIdFromURL)\r\n                  ? <button onClick={onClickHandler}>+</button>\r\n                  : <span onDoubleClick={onDoubleClickHandler}>{newStatus}</span>\r\n            )\r\n      }\r\n      </>\r\n   )\r\n})\r\n\r\nexport type StatusType = {\r\n   status: string\r\n   authId: number | null\r\n   userIdFromURL?: string | null\r\n   updateStatusCallback(status: string): void\r\n}","import React, {ErrorInfo} from \"react\";\r\n\r\ntype ErrorBoundaryState = { error: Error | null, errorInfo: ErrorInfo | null };\r\nexport class ErrorBoundary extends React.Component< any, ErrorBoundaryState > {\r\n   constructor(props: any) {\r\n      super(props);\r\n      this.state = { error: null, errorInfo: null };\r\n   }\r\n\r\n   componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n      // Catch errors in any components below and re-render with error message\r\n      this.setState({\r\n         error: error,\r\n         errorInfo: errorInfo\r\n      })\r\n      // You can also log error messages to an error reporting service here\r\n   }\r\n\r\n   render() {\r\n      if (this.state.errorInfo) {\r\n         // Error path\r\n         return (\r\n            <div>\r\n               <h2>Something went wrong.</h2>\r\n               <details style={{ whiteSpace: 'pre-wrap' }}>\r\n                  {this.state.error && this.state.error.toString()}\r\n                  <br />\r\n                  {this.state.errorInfo.componentStack}\r\n               </details>\r\n            </div>\r\n         );\r\n      }\r\n      // Normally, just render children\r\n      return this.props.children;\r\n   }\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from \"../profile.module.scss\";\r\nimport {Status} from \"./Status/Status\";\r\nimport {ErrorBoundary} from \"../../../Commons/ErrorBoundary/ErrorBoundary\";\r\nimport ava from '../../../../assets/ava.png'\r\nimport {ProfileUserInfoType} from \"../../../../redux/profile/profileReducer\";\r\nimport {FieldForm} from \"../../../Commons/FieldForm/FieldForm\";\r\nimport {Form} from \"react-final-form\";\r\nimport {FORM_ERROR} from \"final-form\";\r\n\r\nexport const ProfileUserInfo: React.FC<ProfileUserInfoBlock> = React.memo((props) => {\r\n   const {profileUserInfo, updatePhotoCallback, authId, updateProfileDataCallback,...statusProps} = props\r\n   const {fullName, userId, photos, contacts,} = profileUserInfo\r\n   const keys: string[] = Object.keys(profileUserInfo.contacts)\r\n   const [editMode, setEditMode] = useState(false)\r\n   const onDownloadFile = (e: ChangeEvent<HTMLInputElement>) => e.target.files && updatePhotoCallback(e.target.files[0])\r\n   const onSubmitHandler = async (profileData: ProfileUserInfoType) => {\r\n      let data = await updateProfileDataCallback(profileData)\r\n      if (data.resultCode === 1) {\r\n         return {[FORM_ERROR]: data.messages[0]}\r\n      } else {\r\n         setEditMode(false)\r\n      }\r\n   }\r\n   return (\r\n      <ErrorBoundary>\r\n         <div>\r\n            <div className={s.profile__info}>\r\n               <div className={s.profile__info_img}>\r\n                  <img src={photos.large !== null ? photos.large : ava} alt=\"Profile photo\"/>\r\n                  {\r\n                     authId === Number(userId) &&\r\n                     <div>\r\n                       <input type=\"file\" onChange={onDownloadFile}/>\r\n                     </div>\r\n                  }\r\n               </div>\r\n               <div className={s.profile__info_text}>\r\n                  <h3>{fullName}</h3>\r\n                  <Status {...statusProps} authId={authId}/>\r\n                  <h4>{contacts.github}</h4>\r\n               </div>\r\n            </div>\r\n            {\r\n               !editMode\r\n                  ? <ProfileData profileUserInfo={profileUserInfo} setEditMode={setEditMode} contactsKeys={keys}/>\r\n                  : <ProfileDataForm onSubmit={onSubmitHandler} contactsKeys={keys} initialValues={profileUserInfo}/>\r\n\r\n            }\r\n         </div>\r\n      </ErrorBoundary>\r\n   )\r\n})\r\n\r\n//===============================================\r\ntype ProfileDataType = {\r\n   profileUserInfo: ProfileUserInfoType\r\n   setEditMode(editMode: boolean): void\r\n   contactsKeys: string[]\r\n}\r\nconst ProfileData: React.FC<ProfileDataType> = ({profileUserInfo, setEditMode, contactsKeys}) => {\r\n   const onClickEditHandler = () => setEditMode(true)\r\n\r\n   return (\r\n      <div>\r\n         <div>\r\n            <h4>aboutMe</h4><span>{profileUserInfo.aboutMe}</span>\r\n         </div>\r\n         <div>\r\n            <h4>lookingForAJob</h4><span>{profileUserInfo.lookingForAJob ? \"Yes\" : \"No\"}</span>\r\n         </div>\r\n         {profileUserInfo.lookingForAJob &&\r\n         <div>\r\n           <h4>lookingForAJobDescription</h4><span>{profileUserInfo.lookingForAJobDescription}</span>\r\n         </div>\r\n         }\r\n         {\r\n            // @ts-ignore\r\n            contactsKeys.map(key => <Contact key={key} contactKey={key} value={profileUserInfo.contacts[key]}/>)\r\n         }\r\n         <button onClick={onClickEditHandler}>Edit</button>\r\n      </div>\r\n   )\r\n}\r\n\r\n//===============================================\r\ntype ContactType = {\r\n   contactKey: string\r\n   value: string | null\r\n}\r\nconst Contact: React.FC<ContactType> = ({contactKey, value}) => {\r\n   return (\r\n      <div>\r\n         <h4>{contactKey}</h4><span>{value !== null ? value : \"no\"}</span>\r\n      </div>\r\n   )\r\n}\r\n\r\n//===============================================\r\ntype ProfileDataFormType = {\r\n   onSubmit(profileData: ProfileUserInfoType): void\r\n   initialValues: ProfileUserInfoType\r\n   contactsKeys: string[]\r\n}\r\nconst ProfileDataForm: React.FC<ProfileDataFormType> = ({onSubmit, contactsKeys, initialValues}) => {\r\n   return (\r\n      <Form\r\n         onSubmit={onSubmit} initialValues={initialValues}\r\n         render={\r\n            ({handleSubmit, submitError,}) => (\r\n               <form onSubmit={handleSubmit}>\r\n                  <h2>Profile Info</h2>\r\n                  <div>\r\n                     <FieldForm type={\"text\"} placeholder={\"fullName\"} name={\"fullName\"} />\r\n                  </div>\r\n                  <div>\r\n                     <FieldForm type={\"text\"} placeholder={\"aboutMe\"} name={\"aboutMe\"}/>\r\n                  </div>\r\n                  <div>\r\n                     <label>lookingForAJob</label>\r\n                     <FieldForm type={\"checkbox\"} name={\"lookingForAJob\"}/>\r\n                  </div>\r\n                  <div>\r\n                     <FieldForm type={\"text\"} placeholder={\"lookingForAJobDescription\"} name={\"lookingForAJobDescription\"}/>\r\n                  </div>\r\n                  <h2>Contacts</h2>\r\n                  {\r\n                     contactsKeys.map(key => <FieldForm type={\"text\"} placeholder={key} name={`contacts.${key}`} submitError={submitError}/>)\r\n                  }\r\n                  <button type=\"submit\">Submit</button>\r\n                  {submitError && <span style={{color: \"red\"}}>{submitError}</span>}\r\n               </form>\r\n            )\r\n         }\r\n      />\r\n   )\r\n}\r\n\r\n//===============================================\r\ntype ProfileUserInfoBlock = {\r\n   profileUserInfo: ProfileUserInfoType\r\n   status: string\r\n   authId: number | null\r\n   userIdFromURL?: string | null\r\n   updateStatusCallback(status: string): void\r\n   updatePhotoCallback(file: File): void\r\n   updateProfileDataCallback(profileData: ProfileUserInfoType): Promise<any>\r\n}\r\n","import React from 'react';\r\nimport s from \"../profile.module.scss\";\r\nimport {Form} from \"react-final-form\";\r\nimport {FieldForm} from \"../../../Commons/FieldForm/FieldForm\";\r\nimport {ErrorBoundary} from \"../../../Commons/ErrorBoundary/ErrorBoundary\";\r\n\r\nexport const ProfileForm: React.FC<ProfileFormType> = React.memo(({addPostCallback}) => {\r\n   const onSubmitHandler = ({post}: PostSubmitType) => addPostCallback(post)\r\n   return (\r\n      <ErrorBoundary>\r\n         <div className={s.profile__addPost}>\r\n            <Form\r\n               onSubmit={onSubmitHandler}\r\n               render={\r\n                  ({handleSubmit,}) => (\r\n                     <form onSubmit={handleSubmit}>\r\n                        <div>\r\n                           <FieldForm type={\"text\"} placeholder={\"Add new message\"} name={\"post\"}\r\n                                      className={\"messages__addPost_btn\"}/>\r\n                        </div>\r\n                        <button type=\"submit\" className={s.messages__addPost_btn}>Add</button>\r\n                     </form>\r\n                  )\r\n               }\r\n            />\r\n         </div>\r\n      </ErrorBoundary>\r\n   );\r\n})\r\n\r\ntype ProfileFormType = {\r\n   addPostCallback(post: string): void\r\n}\r\ntype PostSubmitType = {\r\n   post: string\r\n}","import React from \"react\";\r\nimport s from './post.module.scss'\r\n\r\nexport type PostsType = {\r\n   id: string\r\n   message: string\r\n   like: number\r\n}\r\nconst Post: React.FC<PostsType> = (props) => {\r\n   return (\r\n      <div className={s.post}>\r\n         <p className={s.post_message}>{props.message}</p>\r\n         <button className={s.post_like}>{props.like}</button>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from \"../profile.module.scss\";\r\nimport Post, {PostsType} from \"./Post/Post\";\r\nimport {ErrorBoundary} from \"../../../Commons/ErrorBoundary/ErrorBoundary\";\r\n\r\nexport const Posts: React.FC<PostsTypeBlock> = ({ posts }) => {\r\n   return (\r\n      <ErrorBoundary>\r\n         <h3 className={s.profile__postTitle}>My posts</h3>\r\n         <div className={s.profile__posts}>\r\n            {posts.map(p => <Post id={p.id} message={p.message} like={p.like} key={p.id}/>)}\r\n         </div>\r\n      </ErrorBoundary>\r\n   );\r\n};\r\n\r\ntype PostsTypeBlock = {\r\n   posts: PostsType[]\r\n}","import React from \"react\";\r\nimport s from './profile.module.scss'\r\nimport {PostsType} from \"./Posts/Post/Post\";\r\nimport {ProfileUserInfoType} from \"../../../redux/profile/profileReducer\";\r\nimport {ProfileUserInfo} from \"./ProfileInfo/ProfileUserInfo\";\r\nimport {ProfileForm} from \"./ProfileForm/ProfileForm\";\r\nimport {Posts} from \"./Posts/Posts\";\r\n\r\nexport const Profile: React.FC<ProfileType> = React.memo((props) => {\r\n   const { posts, addPostCallback, ...profileUserInfoProps } = props\r\n\r\n   return (\r\n      <div className={s.profile}>\r\n         <ProfileUserInfo {...profileUserInfoProps}/>\r\n         <Posts posts={posts}/>\r\n         <ProfileForm addPostCallback={addPostCallback}/>\r\n      </div>\r\n   )\r\n})\r\n\r\ntype ProfileType = {\r\n   profileUserInfo: ProfileUserInfoType\r\n   posts: PostsType[]\r\n   status: string\r\n   authId: number | null\r\n   userIdFromURL?: string | null\r\n   addPostCallback(post: string): void\r\n   updateStatusCallback(status: string): void\r\n   updatePhotoCallback(file: File): void\r\n   updateProfileDataCallback(profileData: ProfileUserInfoType): Promise<any>\r\n}\r\n","import {RootState, ThunkDispatchType, ThunkType} from \"../redax-store\";\r\nimport {profileAPI} from \"../../api/api\";\r\nimport {addPostAC, setProfilePhoto, setProfileStatus, setProfileUserInfo} from \"./profileActions\";\r\nimport {ProfileUserInfoType} from \"./profileReducer\";\r\n\r\nexport const getProfileUserInfo = (userID: number | null): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n   try {\r\n      if (userID) {\r\n         let data = await profileAPI.getProfile(userID.toString())\r\n         dispatch(setProfileUserInfo(data))\r\n      }\r\n   } catch (e) {\r\n      console.log(\"profileThunk -> getProfileUserInfo \", e)\r\n   }\r\n}\r\n\r\nexport const getProfileStatus = (userID: number | null): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n   try {\r\n      if (userID) {\r\n         let status: string = await profileAPI.getStatus(userID.toString())\r\n         dispatch(setProfileStatus(status))\r\n      }\r\n   } catch (e) {\r\n      console.log(\"profileThunk -> getProfileStatus \", e)\r\n   }\r\n}\r\n\r\nexport const updateProfileStatus = (status: string): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n   try {\r\n      let data = await profileAPI.updateStatus(status)\r\n      if (data.resultCode === 0)\r\n         dispatch(setProfileStatus(status))\r\n   } catch (e) {\r\n      console.log(\"profileThunk -> updateProfileStatus \", e)\r\n   }\r\n}\r\n\r\nexport const uploadProfilePhoto = (file: File): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n   try {\r\n      let data = await profileAPI.uploadPhoto(file)\r\n      if (data.resultCode === 0) {\r\n         dispatch(setProfilePhoto(data.data))\r\n      }\r\n   } catch (e) {\r\n      console.log(\"profileThunk -> uploadProfilePhoto \", e)\r\n   }\r\n}\r\n\r\nexport const updateProfileData = (profileData: ProfileUserInfoType): ThunkType => async (dispatch: ThunkDispatchType, getState: () => RootState): Promise<any> => {\r\n   try {\r\n      const authId = getState().authState.id\r\n      let data = await profileAPI.updateProfile(profileData)\r\n      if (data.resultCode === 0)\r\n         await dispatch(getProfileUserInfo(authId))\r\n      return data\r\n   } catch (e) {\r\n      console.log(\"profileThunk -> updateProfileData \", e)\r\n   }\r\n}\r\n\r\nexport const addPost = (post: string): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n   dispatch(addPostAC(post))\r\n}\r\n","import {RootState} from \"../redax-store\";\r\nimport {ProfileUserInfoType} from \"./profileReducer\";\r\nimport {PostsType} from \"../../Components/Content/Profile/Posts/Post/Post\";\r\n\r\nexport const getUserInfo = (state: RootState): ProfileUserInfoType => state.profilePage.profileUserInfo\r\nexport const getPosts = (state: RootState): PostsType[] => state.profilePage.posts\r\nexport const getAuthId = (state: RootState): number | null => state.authState.id\r\nexport const getStatus = (state: RootState): string => state.profilePage.status\r\n\r\n// Example\r\n// export const getSelectorPosts = createSelector(getPosts, (posts) => posts.filter(p => true))\r\n","import {RootState} from \"../../../redux/redax-store\";\r\nimport {Profile} from \"./Profile\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProfileUserInfoType} from \"../../../redux/profile/profileReducer\";\r\nimport {PostsType} from \"./Posts/Post/Post\";\r\nimport {\r\n   addPost,\r\n   getProfileStatus,\r\n   getProfileUserInfo, updateProfileData,\r\n   updateProfileStatus,\r\n   uploadProfilePhoto\r\n} from \"../../../redux/profile/profileThunk\";\r\nimport {withRouter} from \"../../../hoc/withRouter\";\r\nimport {compose} from \"@reduxjs/toolkit\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {getAuthId, getPosts, getStatus, getUserInfo} from \"../../../redux/profile/profileSelectors\";\r\n\r\nclass ContainerProfile extends React.Component<ContainerProfilePropsType> {\r\n   loadProfileData = () => {\r\n      let userIdFromURL: number | null = Number(this.props.userIdFromURL)\r\n      if (!userIdFromURL) userIdFromURL = this.props.authId\r\n      this.props.getProfileUserInfo(userIdFromURL)\r\n      this.props.getProfileStatus(userIdFromURL)\r\n   }\r\n   componentDidMount = () => this.loadProfileData()\r\n   componentDidUpdate = (prevProps: Readonly<ContainerProfilePropsType>) => {\r\n      const id = this.props.userIdFromURL\r\n      const prevId = prevProps.userIdFromURL\r\n      const prevLargePhoto = prevProps.profileUserInfo.photos.large\r\n      const largePhoto = this.props.profileUserInfo.photos.large;\r\n      (id !== prevId || largePhoto !== prevLargePhoto) && this.loadProfileData()\r\n   }\r\n\r\n   addPostCallback = (post: string) => this.props.addPost(post)\r\n   updateStatusCallback = (status: string) => this.props.updateProfileStatus(status)\r\n   updatePhotoCallback = (file: File) => this.props.uploadProfilePhoto(file)\r\n   updateProfileDataCallback = (profileData: ProfileUserInfoType) => this.props.updateProfileData(profileData)\r\n\r\n   render = () => {\r\n      return (\r\n         <Profile {...this.props} userIdFromURL={this.props.userIdFromURL}\r\n                  updateProfileDataCallback={this.updateProfileDataCallback}\r\n                  updatePhotoCallback={this.updatePhotoCallback}\r\n                  addPostCallback={this.addPostCallback}\r\n                  updateStatusCallback={this.updateStatusCallback}\r\n         />\r\n      )\r\n   }\r\n}\r\n\r\nexport type ContainerProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n   profileUserInfo: ProfileUserInfoType\r\n   posts: PostsType[]\r\n   authId: number | null\r\n   status: string\r\n   userIdFromURL?: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n   getProfileUserInfo(userID: number | null): void\r\n   addPost(post: string): void\r\n   getProfileStatus(userID: number | null): void\r\n   updateProfileStatus(status: string): void\r\n   uploadProfilePhoto(file: File): void\r\n   updateProfileData(profileData: ProfileUserInfoType): Promise<any>\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\r\n   return {\r\n      profileUserInfo: getUserInfo(state),\r\n      posts: getPosts(state),\r\n      authId: getAuthId(state),\r\n      status: getStatus(state),\r\n   }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n   connect(mapStateToProps, {getProfileUserInfo, addPost, getProfileStatus, updateProfileStatus, uploadProfilePhoto, updateProfileData}),\r\n   withRouter,\r\n   withAuthRedirect,\r\n)(ContainerProfile)\r\n","import {useNavigate, useParams} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\n\r\nexport function withRouter<T>(Component: ComponentType<T>) {\r\n   return (props: any) => {\r\n      let {userID} = useParams<string>();\r\n      let navigate = useNavigate()\r\n      return <Component {...props} userIdFromURL={userID} navigate={navigate}/>\r\n   };\r\n}\r\n\r\n"],"sourceRoot":""}